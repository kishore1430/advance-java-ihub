ServletContext object
======================
ServletContext is an interface which is present in javax.servlet package.

ServletContext object is created by the web container for every web application.

ServletContext object is used to read configuration information from web.xml file which is global.

We can create ServletContext object as follow.

ex:
	ServletContext context=getServletContext(); 

	or 

	ServletConfig config=getServletConfig();
	ServletContext context=config.getServletContext();

ServletContext having following two methods.

1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names. 


Deployment Directory Structure
----------------------------
ContextApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---Web Content
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  
  <context-param>
  	<param-name>driver</param-name>
  	<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  </context-param>
  
  <context-param>
  	<param-name>url</param-name>
  	<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  </context-param>
  
  
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletContext context=getServletContext();
		
		pw.println(context.getInitParameter("driver")+"<br>");
		pw.println(context.getInitParameter("url")+"<br>");
		
		Enumeration<String> e=context.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/ContextApp/

Servlet To Servlet Communication
===============================
Servlet to servlet communication is also known as servlet chaining.

Servlet to servlet communication is possible by using three ways.

1) Forwarding the request 

2) Including the response 

3) Send redirection 

1) Forwarding the request 
--------------------------
In fowarding the request, the output of source servlet program will be discarded and output of destination program will goes to browser window as dynamic response.

To forward the request we need to use RequestDispatcher object.

We can create RequestDispatcher object as follow.

ex:
	RequestDispatcher rd=req.getRequestDispatcher();
	rd.forward(req,res);


2) Including the response 
------------------------
In including the response, the output of source servlet program and output of destination servlet program combinely goes to browser window as dynamic response.

To include the response we need ot use RequestDispatcher object.

We can create RequestDispatcher object as follow.

ex:
	RequestDispatcher rd=req.getRequestDispatcher();
	rd.include(req,res);


Deployment Directory Structure
----------------------------
STSApp1
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---TestSrv1.java
			|---TestSrv2.java
|---Web Content
	|
	|-----form.html
	|
	|-----WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<center>
	<form action="test1">
		
		UserName: <input type="text" name="t1"/> <br>
		
		Password: <input type="password" name="t2"/> <br>
		
		<input type="submit" value="submit"/>
		
	</form>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 	<servlet>
 		<servlet-name>TestSrv1</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv1</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv1</servlet-name>
 		<url-pattern>/test1</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>TestSrv2</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv2</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv2</servlet-name>
 		<url-pattern>/test2</url-pattern>
 	</servlet-mapping>
 	
 	<welcome-file-list>
 		<welcome-file>form.html</welcome-file>
 	</welcome-file-list>
 
</web-app>


TestSrv1.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv1 extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res )throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String uname=req.getParameter("t1");
		String pass=req.getParameter("t2");
		
		if(pass.equals("admin"))
		{
			RequestDispatcher rd=req.getRequestDispatcher("test2");
			rd.forward(req,res);
		}
		else
		{
			pw.println("<center><b style='color:red'>Sorry! Incorrect username or password</b></center> <br>");
			RequestDispatcher rd=req.getRequestDispatcher("form.html");
			rd.include(req,res);
		}
		pw.close();
	}
}

TestSrv2.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv2 extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res )throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Login Successfully!!!</h1></center>");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/STSApp1/



3) Send redirection
====================
A send redirection is used to send the request to the application which is present in same serve or different server.

It sends always new request.

It uses browser window to send the request.

We can perform send redirection as follow.

ex:
	res.sendRedirect(url);

Deployment Directory Structure
----------------------------
STSApp2
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---Web Content
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------

<center>
	
	<a href="test?t1=flights"> Flights </a> <br>
	<a href="test?t1=hotels"> Hotels </a> <br>
	<a href="test?t1=railways"> Trains </a> <br>
		
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		String value=req.getParameter("t1");
		
		res.sendRedirect("https://www.makemytrip.com/"+value);
		
		pw.close();
		
	}
}

Request url
-----------
	http://localhost:2525/STSApp2/

































































































