Example application on HTML based form page to Servlet communication
=====================================================================
Diagram: servlet4.1

Deployment Directory structure
----------------------------
VoteApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java
|---Web Content
	|
	|----form.html 
	|
	|----WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

We can send the request to servlet program in two methodologies.

1) GET Methodology 
-----------------
	It will carry limited amount of data.

2) POST Methodology 
-----------------
	It will carry unlimited amount of data.

While working with HttpServlet class , it is never recommanded to use service(-,-) method because it is not designed according HTTP protocol features.

It is always recommanded to use doXxx(-,-) method because they have designed according to HTTP protocol features.

We have seven doXxx(-,-) methods in servlets.

1) doGet(-,-)
2) doPost(-,-)
3) doPut(-,-)
4) doHead(-,-)
5) doOption(-,-)
6) doTrace(-,-)
7) doDelete(-,-)

prototype of doXxx(-,-) method
-----------------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
{
	-
	-
	-
}

form.html
---------

<form action="test" method="GET">

	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>

</form>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>VoteSrv</servlet-name>
  	<servlet-class>com.ihub.www.VoteSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>VoteSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

VoteSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		
		//convert string age to int age
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1 style='color:red'>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1 style='color:green'>U r eligible to vote </h1></center>");
		
		pw.close();
	}
}

Request url
-----------
	http://localhost:2525/VoteApp/
	


Q) What is the difference between GET and POST methodology?

GET					POST
----------				--------
It is a default methodology.		It is not a default methodology.

It will carry limited amount of data.	It will carry unlimited amount of data.

It sends the request fasty.		It sends the request bit slow.

It is not suitable for secure data.	It is suitable for secure data.

It is not suitable to perform 		It is suitable to perform encryption and file uploading.
encryption and file uploading.

To process GET methodology we will use	To process POST methodology we will use doPost(-,-) method.
doGet(-,-) method.

HTML to Servlet to Database communication
==========================================
Diagram: servlet4.2

Deployment Directory structure
----------------------------
FormApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---FormSrv.java
|---Web Content
	|
	|----form.html 
	|
	|----WEB-INF
		|
		|---web.xml 
		|
		|------lib
			|
			|---ojdbc14.jar
Note:
-----
In above application we need to add "servlet-api.jar"  and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file inside "WEB-INF/lib" folder seperately.


form.html
--------

<form action="test" method="POST">

	No: <input type="text" name="t1"/> <br>
	
	Name: <input type="text" name="t2"/> <br>
	
	Address: <input type="text" name="t3"/> <br>
	
	<input type="submit" value="submit"/>
	
</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  	<servlet>
  		<servlet-name>FormSrv</servlet-name>
  		<servlet-class>com.ihub.www.FormSrv</servlet-class>
  	</servlet>
  	<servlet-mapping>
  		<servlet-name>FormSrv</servlet-name>
  		<url-pattern>/test</url-pattern>
  	</servlet-mapping>
  	
  	<welcome-file-list>
  		<welcome-file>form.html</welcome-file>
  	</welcome-file-list>
  
</web-app>

FormSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FormSrv extends HttpServlet 
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String sno=req.getParameter("t1");
		int no=Integer.parseInt(sno);
		String name=req.getParameter("t2");
		String add=req.getParameter("t3");
		
		//inser the data into a database table
		Connection con=null;
		PreparedStatement ps=null;
		String qry=null;
		int result=0;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry="insert into student values(?,?,?)";
			ps=con.prepareStatement(qry);
			//set the values
			ps.setInt(1,no);
			ps.setString(2,name);
			ps.setString(3,add);
			
			//execute
			result=ps.executeUpdate();
			if(result==0)
				pw.println("<center><h1>No Record Inserted</h1></center>");
			else
				pw.println("<center><h1>Record Inserted</h1></center>");
			
			ps.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		pw.close();
	}
}


Request url
---------
	http://localhost:2525/FormApp/


































































