Various methods present in Scrollable ResultSet object
======================================================
rs.next()
--------
	It moves the record point to next position.

rs.getRow()
----------
	It will return position of record pointer.

rs.getXxx()
-----------
	It is used to read the value from record ResultSet.

rs.close() 
--------
	It is used to close ResultSet object.

rs.previous()
-----------
	It is used to move record pointer to previous position.

rs.first()
---------
	It will set the record pointer to first position/record.

rs.isFirst()
--------
	It will check record pointer is in first position or not.

rs.last()
-------
	It will set the record pointer to last position/record.

rs.isLast()
----------
	It will check record pointer is in last position or not.

rs.beforeFirst()
-------------
	It will set the record pointer to BFR position.

rs.afterLast()
-------------
	It will set the record pointer to ALR position.

rs.absolute(+/-)
-------------
	It will move record pointer to next position based on BFR and ALR.

rs.relative(+/-)
------------
	It will move record pointer to next position based on current position.


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableRSApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
											ResultSet.CONCUR_READ_ONLY);
		
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom 
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		//bottom to top 
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		
		rs.close();
		st.close();
		con.close();
		
	}
}


Batch Processing
================
Batch processing is used to declare multiple queries in a jdbc application and makes a single call to the database.

In batch processing, all the queries we need to add in batch.

To add the queries to batch we will use addBatch() method.

To execute the batch we will use executeBatch() method.

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessing 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry1="insert into student values(105,'raj','delhi')";
		String qry2="update student set sname='rani' where sno=101";
		String qry3="delete from student where sno=104";
		
		//add the queries to batch     
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}
}

Transaction Management
======================
Transaction represents a single unit of work.

Diagram: jdbc10.1


SBI Bank
========
drop table sbi;
create table sbi(accno number(6),accholder varchar2(10),accbal number(8));
insert into sbi values(111111,'arjun',10000);
insert into sbi values(222222,'krishna',20000);
commit;

KOTAK Bank
==========
drop table kotak;
create table kotak(accno number(6),accholder varchar2(10),accbal number(8));
insert into kotak values(100001,'anil',90000);
insert into kotak values(200002,'vamsi',80000);
commit;


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source account No :");
		int sacno=sc.nextInt();
		
		System.out.println("Enter the destination account No :");
		int dacno=sc.nextInt();
		
		System.out.println("Enter the amount to be transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//set auto complete off
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		String qry1="update kotak set accbal=accbal-"+amt+" where accno="+sacno;
		String qry2="update sbi set accbal=accbal+"+amt+" where accno="+dacno;
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		boolean flag=true;
		for(int i:result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		
		if(flag==true)
		{
			System.out.println("Transaction Done Successully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed");
			con.rollback();
		}
		
		st.close();
		con.close();
	}
}























 



























