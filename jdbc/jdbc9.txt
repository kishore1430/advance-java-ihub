JDBC Flexible Application
=========================
In jdbc Connection object consider as heavy weight object.

It is never recommanded to create Connection object in every JDBC application.

It is high recommanded to create a seperate class which returns JDBC Connection object.

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	public static  Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}


FlexibleApp.java
---------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Working with Properties file
============================
In regular intervals, our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly to the application.

It is always recommanded to read database properties from properties file.

A properties file contains key and value pair.

dbdetails.properties 
--------------------
driver= oracle.jdbc.driver.OracleDriver
url= jdbc:oracle:thin:@localhost:1521:XE
username= system
password= admin 


PropertiesFileApp.java
---------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		Properties p=new Properties();
		
		//load the data from file to properties class
		p.load(fis);
		
		//read the data from Properties class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Thin-Client/Fat-Server Application
==================================
Every JDBC application is a thin-client/fat-server application.

Diagram: jdbc9.1

To develop thin-client/fat-server application we need to store business logic and persistence logic in database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


PL/SQL procedure
---------------
create or replace procedure first_proc(A IN number,B IN number, C OUT number)
is
begin
C:=A+B;
END;
/


ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to in parameters
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute 
		cst.execute();
		
		//gather the result 
		int result=cst.getInt(3);
		
		System.out.println("Sum of two numbers is ="+result);
		
		cst.close();
		con.close();
		
		
	}
}


Types of ResultSet objects
===========================
We have two types of ResultSet objects in JDBC.

1) Non-Scrollable ResultSet object 

2) Scrollable ResultSet object 


Diagram: jdbc9.2


1) Non-Scrollable ResultSet object 
------------------------------------
A ResultSet object which allows us to read the records sequentially, uni-directionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If JDBC Statement object is created without type,mode value then that ResultSet object is called non-scrollable ResultSet object.

ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");




2) Scrollable ResultSet object 
-----------------------------
A ResultSet object which allows us to read the records non-sequentially, bi-directionally , randomly is called scrollable ResultSet object.

If JDBC Statement object is created with type,mode value then that ResultSet object is called non-scrollable ResultSet object.

ex:
	Statement st=con.createStatement(type,mode);
	ResultSet rs=st.executeQuery("select * from student");


We have following two "type" values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL_INSENSITIVE 


We have following two "mode" values.
ex:
	ResultSet.CONCUR_READ_ONLY
	ResultSet.CONCUR_UPDATABLE




































































